import 'dart:convert';import 'package:ricky_morty/core/error/exeption.dart';import 'package:shared_preferences/shared_preferences.dart';import '../models/person_model.dart';abstract class PersonLocalDataSouces {  Future<List<PersonModel>> getLastPersonsFromCache();  Future<void> getToCache(List<PersonModel> persons);}class PersonLocalDataSourceImpl implements PersonLocalDataSouces {  final SharedPreferences sharedPreferences;  PersonLocalDataSourceImpl({required this.sharedPreferences});  @override  Future<List<PersonModel>> getLastPersonsFromCache() {    final jsonPersonList = sharedPreferences.getStringList('CHACHED_PERSONS_LIST');    if (jsonPersonList != null) {      return Future.value(jsonPersonList.map((e) => PersonModel.fromJson(json.decode(e))).toList());    } else {      throw CacheExeption();    }    throw UnimplementedError();  }  @override  Future<void> getToCache(List<PersonModel> persons) async {    final List<String> jsonPersonsList = persons.map((e) => json.encode(e.toJson())).toList();    await sharedPreferences.setStringList('CHACHED_PERSONS_LIST', jsonPersonsList);    print("PersonCached ${jsonPersonsList.length}");    return Future.value(jsonPersonsList);  }}