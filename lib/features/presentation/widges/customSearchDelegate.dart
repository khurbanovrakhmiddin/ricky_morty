import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:ricky_morty/common/app_colors.dart';import 'package:ricky_morty/features/presentation/widges/search_result.dart';import '../../domain/entities/person_entity.dart';import '../bloc/seearch_bloc/search_bloc.dart';class CustomSearchDelegate extends SearchDelegate {  CustomSearchDelegate() : super(searchFieldLabel: 'Search for characters...');  final _suggestions = [    'Rick',    'Morty',    'Summer',    'Beth',    'Jerry',  ];  @override  List<Widget> buildActions(BuildContext context) {    return [      IconButton(        color: AppColors.mainBackGround,          icon: const Icon(Icons.clear),          onPressed: () {            query = '';            showSuggestions(context,);          })    ];  }  @override  Widget buildLeading(BuildContext context) {    return IconButton(        icon: const Icon(Icons.arrow_back_outlined),        tooltip: 'Back',        onPressed: () => close(context, null));  }  @override  Widget buildResults(BuildContext context) {    print('Inside custom search delegate and search query is $query');    BlocProvider.of<SearchBloc>(context, listen: false)        .add(SearchPersonsEvent(query));    return BlocBuilder<SearchBloc, SearchState>(      builder: (context, state) {        switch(state.status){          case SearchStatus.empty:            return const Center(              child: Icon(Icons.now_wallpaper),            );          case SearchStatus.loading:            return const Center(              child: CircularProgressIndicator(),            );          case SearchStatus.loaded:            if (state.person.isEmpty) {              return _showErrorText('No Characters with that name found');            }            return ListView.builder(              itemCount: state.person.isNotEmpty ? state.person.length : 0,              itemBuilder: (context, int index) {                PersonEntity result = state.person[index];                return SearchResult(result: result);              },            );          case SearchStatus.failure:            return _showErrorText(state.errorMessage);        }      },    );  }  Widget _showErrorText(String errorMessage) {    return Container(      color: Colors.black,      child: Center(        child: Text(          errorMessage,          style: const TextStyle(            fontSize: 20.0,            fontWeight: FontWeight.bold,          ),        ),      ),    );  }  @override  Widget buildSuggestions(BuildContext context) {    if (query.isNotEmpty) {      return Container();    }    return ListView.separated(      padding: const EdgeInsets.all(10),      itemBuilder: (context, index) {        return Text(          _suggestions[index],          style: const TextStyle(            fontSize: 16.0,            fontWeight: FontWeight.w400,          ),        );      },      separatorBuilder: (context, index) {        return const Divider();      },      itemCount: _suggestions.length,    );  }}