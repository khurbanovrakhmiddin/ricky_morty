import 'dart:async';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:ricky_morty/common/app_colors.dart';import 'package:ricky_morty/features/domain/entities/person_entity.dart';import 'package:ricky_morty/features/presentation/bloc/person_list_cubit/person_list_cubit.dart';import 'package:ricky_morty/features/presentation/bloc/person_list_cubit/person_list_state.dart';import 'package:ricky_morty/features/presentation/widges/person_card.dart';class PersonList extends StatelessWidget {final ScrollController controller = ScrollController();double position = 0;void setupScrollController(BuildContext context) {  controller.addListener(() {    if (controller.position.atEdge) {      if (controller.position.pixels != 0) {        position =   controller.position.maxScrollExtent;        print('Load $position');        context.read<PersonListCubit>().loadPerson();      }    }  });}  @override  Widget build(BuildContext context) {    setupScrollController(context);    return BlocBuilder<PersonListCubit, PersonState>(builder: (context, state) {      List<PersonEntity> list = [];      bool isLoading = false;      if (state is PersonLoading && state.isFirstFetch) {        return _loadingIndicator();      }      else if(state is PersonFailure){        return Center(child: Text(state.message),);      }      else if (state is PersonLoaded) {        list = state.list;      }      else if (state is PersonLoading) {        isLoading = true;      }      return ListView.separated(        controller: controller,        itemCount: list.length + (isLoading?1:0),        separatorBuilder: (context, index) {          return const Divider(            color: AppColors.greyColor,          );        },        itemBuilder: (context, index) {          if (index < list.length) {            return PersonCard(person: list[index]);          } else {            Timer(const Duration(milliseconds: 30), () {              controller.jumpTo(controller.position.extentAfter);            });            return _loadingIndicator();          }        },      );    });  }  Widget _loadingIndicator() {    return const Padding(      padding: EdgeInsets.all(8),      child: Center(        child: CircularProgressIndicator(),      ),    );  }}