import 'package:bloc/bloc.dart';import 'package:ricky_morty/features/presentation/bloc/person_list_cubit/person_list_state.dart';import '../../../../core/error/failure.dart';import '../../../domain/entities/person_entity.dart';import '../../../domain/usecases/get_all_persons.dart';class PersonListCubit extends Cubit<PersonState>{  final GetAllPersons getAllPersons;  PersonListCubit({required this.getAllPersons}):super(PersonEmpty());  void loadPerson() async{    if(state is PersonLoading){      return;    }    final currentState = state;int page = 1;    var oldPersonsList = <PersonEntity>[];    if(currentState is PersonLoaded){      oldPersonsList = currentState.list;    }    emit(PersonLoading(oldPersonsList,page == 1));    final failureOrPerson = await getAllPersons(PagePersonParams(page: page));    failureOrPerson.fold((msg) =>     emit(PersonFailure(_mapFailure(msg))), (person) {            page++;      final persons = (state as PersonLoading).oldPersonsList;      persons.add(person as PersonEntity);      emit(PersonLoaded(persons));          });  }  String _mapFailure(Failure failure) {    switch (failure.runtimeType) {      case ServerFailure:        return "ServerFailure";      case CacheFailure:        return "Cache Failure";      default:        return "UnExpected Failure";    }  }}