import 'package:dartz/dartz.dart';import 'package:equatable/equatable.dart';import 'package:ricky_morty/core/usecases/usecase.dart';import 'package:ricky_morty/features/domain/repository/person_repository.dart';import '../../../core/error/failure.dart';import '../entities/person_entity.dart';class SearchPerson extends UseCase<List<PersonEntity>, SearchPersonParams> {  final PersonRepository personRepository;  SearchPerson({required this.personRepository});  @override  Future<Either<Failure, List<PersonEntity>>> call(SearchPersonParams searchPersonParams) {    return personRepository.searchPersons(searchPersonParams.query);  }}class SearchPersonParams extends Equatable {  final String query;  const SearchPersonParams({required this.query});  @override  List<Object?> get props => [];}